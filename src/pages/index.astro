---
import Layout from "../layouts/Layout.astro";
import TimelineItem from "../components/TimelineItem.astro";
import WritingItem from "../components/WritingItem.astro";
import DATA from "../constants/static-data";
import { Image } from "astro:assets";
import PassportPhoto from "../assets/self_passport_photo_2.jpg";

const NAV_MENU_ITEMS = [
	{
		name: "About",
		href: "about",
	},
	{
		name: "Work & Education",
		href: "experience",
	},
	{
		name: "Writings",
		href: "writings",
	},
	{
		name: "Contact",
		href: "contact",
	},
];
---

<Layout title={DATA.name}>
	<main>
		<nav>
			<div class="nav-links">
				{
					NAV_MENU_ITEMS.map(({ name, href }) => (
						<a href={`#${href}`}>{name}</a>
					))
				}
				<button
					id="theme-toggle"
					class="theme-toggle"
					aria-label="Toggle theme"
				>
					üåô
				</button>
			</div>
		</nav>

		<section class="intro" id="about">
			<div class="profile-image">
				<div class="image-container">
					<Image src={PassportPhoto} alt={DATA.name} />
				</div>
			</div>
			<div class="intro-content">
				<h1>{DATA.name}</h1>
				<p class="subtitle">Software Engineer & Designer</p>
				<div class="intro-details">
					<p>
						I craft digital experiences with code and design,
						focusing on clean, efficient solutions to complex
						problems. Currently building the future of research
						decision makers at <a
							href={DATA.currentOrg.link}
							target="_blank"
							rel="noopener">{DATA.currentOrg.name}</a
						>.
					</p>
				</div>
			</div>
		</section>

		<section class="content">
			<div class="section-container" id="experience">
				<h2>Work & Education</h2>
				<ul class="timeline-list">
					{
						DATA.experience.map(
							({ startDate, endDate, org, title }) => (
								<TimelineItem
									title={title}
									year={`${startDate} - ${endDate}`}
									company={org}
									description=""
								/>
							),
						)
					}
					{
						DATA.education.map(
							({ startDate, endDate, org, title }) => (
								<TimelineItem
									title={title}
									year={`${startDate} - ${endDate}`}
									company={org}
									description=""
								/>
							),
						)
					}
				</ul>
			</div>

			<div class="section-container" id="writings">
				<h2>Writings</h2>
				<ul class="writings-list">
					{
						DATA.writings.map(({ title, link, date }) => (
							<WritingItem
								title={title}
								year={date}
								href={link}
							/>
						))
					}
				</ul>
			</div>

			<div class="section-container" id="contact">
				<h2>Contact</h2>
				<ul class="links-list">
					{
						DATA.contact.map(({ link, name }) => (
							<li>
								<a href={link} target="_blank" rel="noopener">
									{name}
								</a>
							</li>
						))
					}
				</ul>
			</div>
		</section>
	</main>
</Layout>

<style lang="scss">
	.theme-toggle {
		background: none;
		border: none;
		font-size: 1.5rem;
		cursor: pointer;
		margin-left: auto;
	}

	main {
		max-width: 48.75rem; // ~780px;
		margin: 0 auto;
		padding: 2rem;
	}

	nav {
		padding: 1rem 0;
		margin-bottom: 3rem;

		.nav-links {
			display: flex;
			gap: 2rem;

			a {
				font-size: 0.9rem;
				text-transform: uppercase;
				letter-spacing: 0.05em;
				border: none;
			}
		}
	}

	.intro {
		margin: 6rem 0;
		animation: fadeIn 0.8s ease-out;
		display: flex;
		gap: 4rem;
		align-items: flex-start;

		&-content {
			flex: 1;
		}

		&-details {
			max-width: 85%;
			font-size: 1.1rem;
		}
	}

	.profile-image {
		flex-shrink: 0;
		width: 12.5rem;
		height: 12.5rem;

		.image-container {
			width: 100%;
			height: 100%;
			position: relative;
			overflow: hidden;
			border: 0.25rem solid #f4a460;
			border-radius: 0.5rem;

			&::before {
				content: "";
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: linear-gradient(45deg, var(--accent), transparent);
				opacity: 0;
				transition: opacity 0.3s ease;
				z-index: 1;
			}

			&:hover {
				&::before {
					opacity: 0.6;
				}

				img {
					transform: scale(1.1);
				}
			}

			img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				transition: transform 0.3s ease;
			}
		}
	}

	h1 {
		font-family: "Space Grotesk", sans-serif;
		font-size: 2.5rem;
		font-weight: 700;
		margin-bottom: 0.5rem;
		line-height: 1.2;
	}

	.subtitle {
		color: var(--text-secondary);
		font-size: 1.25rem;
		margin-bottom: 1.5rem;
	}

	.section-container {
		margin: 4rem 0;
		animation: fadeIn 0.8s ease-out;

		h2 {
			font-family: "Space Grotesk", sans-serif;
			font-size: 1.5rem;
			font-weight: 500;
			margin-bottom: 2rem;
		}
	}

	.timeline-list,
	.writings-list {
		list-style: none;
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}

	.links-list {
		list-style: none;
		display: flex;
		gap: 2rem;
		flex-wrap: wrap;

		a {
			font-weight: 500;
		}
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@media (max-width: 48rem) {
		main {
			padding: 1.5rem;
		}

		.intro {
			margin: 4rem 0;
			flex-direction: column;
			gap: 2rem;

			&-details {
				max-width: 100%;
			}
		}

		.profile-image {
			width: 9.375rem;
			height: 9.375rem;
		}

		h1 {
			font-size: 2rem;
		}

		.nav-links {
			gap: 1rem;
			flex-wrap: wrap;

			a {
				font-size: 0.8rem;
			}
		}
	}
</style>

<script>
	// Detect browser/system theme preference
	const getPreferredTheme = () => {
		if (localStorage.getItem("theme")) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};

	// Apply the preferred theme
	const preferredTheme = getPreferredTheme();
	if (preferredTheme)
		document.documentElement.setAttribute("data-theme", preferredTheme);

	// Update toggle button icon
	const themeToggle = document.getElementById("theme-toggle");
	if (themeToggle) {
		themeToggle.textContent = preferredTheme === "light" ? "üåô" : "‚òÄÔ∏è";

		themeToggle.addEventListener("click", () => {
			const currentTheme =
				document.documentElement.getAttribute("data-theme");
			const newTheme = currentTheme === "light" ? "dark" : "light";
			document.documentElement.setAttribute("data-theme", newTheme);
			localStorage.setItem("theme", newTheme);

			// Update toggle button icon
			themeToggle.textContent = newTheme === "light" ? "üåô" : "‚òÄÔ∏è";
		});
	}
</script>
